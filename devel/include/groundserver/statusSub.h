// Generated by gencpp from file groundserver/statusSub.msg
// DO NOT EDIT!


#ifndef GROUNDSERVER_MESSAGE_STATUSSUB_H
#define GROUNDSERVER_MESSAGE_STATUSSUB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace groundserver
{
template <class ContainerAllocator>
struct statusSub_
{
  typedef statusSub_<ContainerAllocator> Type;

  statusSub_()
    : armDisarm(false)
    , mode(0)  {
    }
  statusSub_(const ContainerAllocator& _alloc)
    : armDisarm(false)
    , mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _armDisarm_type;
  _armDisarm_type armDisarm;

   typedef int32_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::groundserver::statusSub_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::groundserver::statusSub_<ContainerAllocator> const> ConstPtr;

}; // struct statusSub_

typedef ::groundserver::statusSub_<std::allocator<void> > statusSub;

typedef boost::shared_ptr< ::groundserver::statusSub > statusSubPtr;
typedef boost::shared_ptr< ::groundserver::statusSub const> statusSubConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::groundserver::statusSub_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::groundserver::statusSub_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace groundserver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geographic_msgs': ['/opt/ros/kinetic/share/geographic_msgs/cmake/../msg'], 'groundserver': ['/home/mfikih15/Documents/kapalTenggelam/src/groundserver/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'mavros_msgs': ['/opt/ros/kinetic/share/mavros_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'uuid_msgs': ['/opt/ros/kinetic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::groundserver::statusSub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::groundserver::statusSub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::groundserver::statusSub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::groundserver::statusSub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::groundserver::statusSub_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::groundserver::statusSub_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::groundserver::statusSub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4bbb9da5f572a607d9ab31c21067e0d";
  }

  static const char* value(const ::groundserver::statusSub_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4bbb9da5f572a60ULL;
  static const uint64_t static_value2 = 0x7d9ab31c21067e0dULL;
};

template<class ContainerAllocator>
struct DataType< ::groundserver::statusSub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "groundserver/statusSub";
  }

  static const char* value(const ::groundserver::statusSub_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::groundserver::statusSub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool armDisarm\n\
int32 mode\n\
";
  }

  static const char* value(const ::groundserver::statusSub_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::groundserver::statusSub_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.armDisarm);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct statusSub_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::groundserver::statusSub_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::groundserver::statusSub_<ContainerAllocator>& v)
  {
    s << indent << "armDisarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armDisarm);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GROUNDSERVER_MESSAGE_STATUSSUB_H
