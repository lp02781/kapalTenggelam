// Generated by gencpp from file groundserver/inputRemote.msg
// DO NOT EDIT!


#ifndef GROUNDSERVER_MESSAGE_INPUTREMOTE_H
#define GROUNDSERVER_MESSAGE_INPUTREMOTE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace groundserver
{
template <class ContainerAllocator>
struct inputRemote_
{
  typedef inputRemote_<ContainerAllocator> Type;

  inputRemote_()
    : codeYaw(0)
    , codeThrottle(0)
    , codePitch(0)
    , codeRoll(0)
    , codeArmGripOn(0)
    , codeArmGripOff(0)
    , codeStabilizeMode(0)
    , codeRemoteArmed(0)  {
    }
  inputRemote_(const ContainerAllocator& _alloc)
    : codeYaw(0)
    , codeThrottle(0)
    , codePitch(0)
    , codeRoll(0)
    , codeArmGripOn(0)
    , codeArmGripOff(0)
    , codeStabilizeMode(0)
    , codeRemoteArmed(0)  {
  (void)_alloc;
    }



   typedef int8_t _codeYaw_type;
  _codeYaw_type codeYaw;

   typedef int8_t _codeThrottle_type;
  _codeThrottle_type codeThrottle;

   typedef int8_t _codePitch_type;
  _codePitch_type codePitch;

   typedef int8_t _codeRoll_type;
  _codeRoll_type codeRoll;

   typedef int8_t _codeArmGripOn_type;
  _codeArmGripOn_type codeArmGripOn;

   typedef int8_t _codeArmGripOff_type;
  _codeArmGripOff_type codeArmGripOff;

   typedef int8_t _codeStabilizeMode_type;
  _codeStabilizeMode_type codeStabilizeMode;

   typedef int8_t _codeRemoteArmed_type;
  _codeRemoteArmed_type codeRemoteArmed;




  typedef boost::shared_ptr< ::groundserver::inputRemote_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::groundserver::inputRemote_<ContainerAllocator> const> ConstPtr;

}; // struct inputRemote_

typedef ::groundserver::inputRemote_<std::allocator<void> > inputRemote;

typedef boost::shared_ptr< ::groundserver::inputRemote > inputRemotePtr;
typedef boost::shared_ptr< ::groundserver::inputRemote const> inputRemoteConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::groundserver::inputRemote_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::groundserver::inputRemote_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace groundserver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geographic_msgs': ['/opt/ros/kinetic/share/geographic_msgs/cmake/../msg'], 'groundserver': ['/home/mfikih15/Documents/kapalTenggelam/serverGabut/src/groundserver/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'mavros_msgs': ['/opt/ros/kinetic/share/mavros_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'uuid_msgs': ['/opt/ros/kinetic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::groundserver::inputRemote_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::groundserver::inputRemote_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::groundserver::inputRemote_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::groundserver::inputRemote_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::groundserver::inputRemote_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::groundserver::inputRemote_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::groundserver::inputRemote_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60b79f3a2f7dab179828919f073b14bf";
  }

  static const char* value(const ::groundserver::inputRemote_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60b79f3a2f7dab17ULL;
  static const uint64_t static_value2 = 0x9828919f073b14bfULL;
};

template<class ContainerAllocator>
struct DataType< ::groundserver::inputRemote_<ContainerAllocator> >
{
  static const char* value()
  {
    return "groundserver/inputRemote";
  }

  static const char* value(const ::groundserver::inputRemote_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::groundserver::inputRemote_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 codeYaw \n\
int8 codeThrottle\n\
int8 codePitch\n\
int8 codeRoll\n\
int8 codeArmGripOn\n\
int8 codeArmGripOff\n\
int8 codeStabilizeMode\n\
int8 codeRemoteArmed\n\
";
  }

  static const char* value(const ::groundserver::inputRemote_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::groundserver::inputRemote_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.codeYaw);
      stream.next(m.codeThrottle);
      stream.next(m.codePitch);
      stream.next(m.codeRoll);
      stream.next(m.codeArmGripOn);
      stream.next(m.codeArmGripOff);
      stream.next(m.codeStabilizeMode);
      stream.next(m.codeRemoteArmed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct inputRemote_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::groundserver::inputRemote_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::groundserver::inputRemote_<ContainerAllocator>& v)
  {
    s << indent << "codeYaw: ";
    Printer<int8_t>::stream(s, indent + "  ", v.codeYaw);
    s << indent << "codeThrottle: ";
    Printer<int8_t>::stream(s, indent + "  ", v.codeThrottle);
    s << indent << "codePitch: ";
    Printer<int8_t>::stream(s, indent + "  ", v.codePitch);
    s << indent << "codeRoll: ";
    Printer<int8_t>::stream(s, indent + "  ", v.codeRoll);
    s << indent << "codeArmGripOn: ";
    Printer<int8_t>::stream(s, indent + "  ", v.codeArmGripOn);
    s << indent << "codeArmGripOff: ";
    Printer<int8_t>::stream(s, indent + "  ", v.codeArmGripOff);
    s << indent << "codeStabilizeMode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.codeStabilizeMode);
    s << indent << "codeRemoteArmed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.codeRemoteArmed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GROUNDSERVER_MESSAGE_INPUTREMOTE_H
